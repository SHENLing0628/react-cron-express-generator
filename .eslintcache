[{"/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/reportWebVitals.js":"1","/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/components/CronGenerator/index.js":"2","/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/App.js":"3"},{"size":362,"mtime":1606211517744,"results":"4","hashOfConfig":"5"},{"size":24165,"mtime":1606211785382,"results":"6","hashOfConfig":"5"},{"size":1250,"mtime":1606212256140,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rt1gi5",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/reportWebVitals.js",[],"/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/components/CronGenerator/index.js",["15","16","17"],"/*\n * @Author: ShenLing\n * @Date: 2020-10-20 17:31:22\n * @LastEditors: ShenLing\n * @LastEditTime: 2020-11-24 16:56:45\n */\nimport React from 'react'\nimport './index.scss'\nimport { Dialog, Tab, Radio, Input, Button, NumberPicker, Checkbox, Grid, Table, Message } from '@alifd/next'\n\nconst { Row, Col } = Grid\n\nexport default class GronGenerator extends React.Component {\n\tstate = {\n\t\t// 各个cron阈表达式\n\t\texpress: {\n\t\t\tsecond: '*',\n\t\t\tminute: '*',\n\t\t\thour: '*',\n\t\t\tdate: '*',\n\t\t\tmonth: '*',\n\t\t\tweek: '?',\n\t\t\tyear: '*'\n\t\t},\n\n\t\t// 每个阈选择的表达式类型\n\t\texpressType: {\n\t\t\tsecond: 'everyTime',\n\t\t\tminute: 'everyTime',\n\t\t\thour: 'everyTime',\n\t\t\tdate: 'everyTime',\n\t\t\tmonth: 'everyTime',\n\t\t\tweek: 'everyTime',\n\t\t\tyear: 'everyTime',\n\t\t},\n\n\t\t// 周期选择 - 最小时间 / 最大时间\n\t\tperiodTime: {\n\t\t\tsecond: { max:2, min:1 },\n\t\t\tminute: { max: 2, min: 1 },\n\t\t\thour: { max: 2, min: 1 },\n\t\t\tdate: { max: 2, min: 1 },\n\t\t\tmonth: { max: 2, min: 1 },\n\t\t\tweek: { max: 2, min: 1 },\n\t\t\tyear: { max: 2020, min: 2020 },\n\t\t},\n\n\t\t// 循环选择 - 开始时间./ 执行周期\n\t\tloopTime: {\n\t\t\tsecond: { startTime:1, period:1 },\n\t\t\tminute: { startTime: 1, period: 1 },\n\t\t\thour: { startTime: 1, period: 1 },\n\t\t\tdate: { startTime: 1, period: 1 },\n\t\t\tmonth: { startTime: 1, period: 1 },\n\t\t},\n\n\t\t// 枚举指定选择 - 指定时间节点数组，例如日期数组\n\t\tenumTime: {\n\t\t\tsecond: [],\n\t\t\tminute: [],\n\t\t\thour: [],\n\t\t\tdate: [],\n\t\t\tmonth: [],\n\t\t\tweek: []\n\t\t},\n\n\t\t// 最近工作日 - 距离X日最近的工作日\n\t\tmostRecentWorkDay: 1,\n\n\t\t// 当前月份最后一个星期X\n\t\tlastWeekDay: 1,\n\n\t\t// 指定X周的星期X - 例如：第一周的星期三\n\t\tweekday: {\n\t\t\tweekNum: 1,\n\t\t\tweekDayNum: 1\n\t\t},\n\n\t\talertMsg: null\n\t}\n\n /**\n  * @name: 打开对话框时，获取传入的cron表达式字符串\n  * @param {*} nextProps\n  * @return {*}\n  */\n\tUNSAFE_componentWillReceiveProps (nextProps) {\n\t\tif (nextProps.dialogVisible && nextProps.initCron) {\n\t\t\tlet cronArr = nextProps.initCron.split(' ')\n\t\t\tlet newExpress = JSON.parse(JSON.stringify(this.state.express))\n\t\t\tnewExpress.second = cronArr[0] ?? newExpress.second\n\t\t\tnewExpress.minute = cronArr[1] ?? newExpress.minute\n\t\t\tnewExpress.hour = cronArr[2] ?? newExpress.hour\n\t\t\tnewExpress.date = cronArr[3] ?? newExpress.date\n\t\t\tnewExpress.month = cronArr[4] ?? newExpress.week\n\t\t\tnewExpress.week = cronArr[5] ??\tnewExpress.week\n\t\t\tnewExpress.year = cronArr[6] ?? newExpress.year\n\n\t\t\tthis.reverseGenerateCRON(newExpress)\n\t\t\tthis.setState({ express: newExpress })\n\t\t}\n\t}\n\n /**\n  * @name: 反编译解析表达式\n  * @param {*} express 表达式对象\n  * @return {*}\n  */ \n\treverseGenerateCRON = (express) => {\n\t\tlet newExpressType = JSON.parse(JSON.stringify(this.state.expressType))\n\n\t\tnewExpressType.second = this.getType(express.second, 'second')\n\t\tnewExpressType.minute = this.getType(express.minute, 'minute')\n\t\tnewExpressType.hour = this.getType(express.hour, 'hour')\n\t\tnewExpressType.date = this.getType(express.date, 'date')\n\t\tnewExpressType.month = this.getType(express.month, 'month')\n\t\tnewExpressType.week = this.getType(express.week, 'week')\n\t\tnewExpressType.year = this.getType(express.year, 'year')\n\n\t\tthis.setState({ expressType: newExpressType })\n\n\t}\n\n /**\n  * @name: 反解析cron表达式到UI时，每个阈内容进行解析 - 获取每个阈使用的类型和具体值\n  * @param {*} expStr cron表达式内容，例如：*，5L\n  * @param {*} expressType cron阈类型，例如：minute，hour，week\n  * @return {*} 每个阈使用的类型\n  */ \n\tgetType = (expStr, expressType) => {\n\t\tif (expStr === '*') return 'everyTime'\n\n\t\telse if (expStr === '?') return 'none'\n\n\t\telse if (expStr === 'L') return 'lastDay'\n\n\t\telse if (new RegExp('[-]').test(expStr)) {\n\t\t\tlet newPeriodTime = this.state.periodTime\n\t\t\tlet values = expStr.split('-')\n\t\t\tnewPeriodTime[expressType] = { max: parseInt(values[1]), min: parseInt(values[0]) }\n\n\t\t\tthis.setState({ periodTime: newPeriodTime })\n\t\t\treturn 'period'\n\t\t}\n\n\t\telse if (new RegExp('[/]').test(expStr)) {\n\t\t\tlet newLoopTime = this.state.loopTime\n\t\t\tlet values = expStr.split('/')\n\t\t\tnewLoopTime[expressType] = { startTime: parseInt(values[0]), period: parseInt(values[1]) }\n\n\t\t\tthis.setState({ loopTime: newLoopTime })\n\t\t\treturn 'loop'\n\t\t}\n\n\t\telse if (new RegExp('[,]').test(expStr)) {\n\t\t\tlet newEnumTime = this.state.enumTime\n\t\t\tlet values = expStr.split(',')\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tvalues[i] = parseInt(values[i])\n\t\t\t}\n\t\t\tnewEnumTime[expressType] = values\n\n\t\t\tthis.setState({ enumTime: newEnumTime })\n\t\t\treturn 'enum'\n\t\t}\n\n\t\telse if (new RegExp('[W]').test(expStr)) {\n\t\t\tlet value = parseInt(expStr.substring(0, 1))\n\t\t\tconsole.log(value)\n\t\t\tthis.setState({ mostRecentWorkDay: value })\n\t\t\treturn 'mostRecentWorkDay'\n\t\t}\n\n\t\telse if (new RegExp('[L]').test(expStr)) {\n\t\t\tthis.setState({ lastWeekDay: parseInt(expStr.substring(0, 1)) })\n\t\t\treturn 'lastWeekDay'\n\t\t}\n\n\t\telse if (new RegExp('[#]').test(expStr)) {\n\t\t\tlet newWeekday = this.state.weekday\n\t\t\tlet values = expStr.split('#')\n\n\t\t\tnewWeekday = { weekNum: parseInt(values[0]), weekDayNum: parseInt(values[1]) }\n\n\t\t\tthis.setState({ weekday: newWeekday })\n\t\t\treturn 'weekday'\n\t\t}\n\n\t\telse if (expStr === '') {\n\t\t\treturn 'optional'\n\t\t}\n\n\t\telse return\n\t}\n\n\n\t/**\n  * @name: 选择每个表达式的具体展示类型\n  * @param {*} type 表达式内容类型：everyTime, period, loop, enum 等\n  * @param {*} expressType cron类型：second, minute, hour, date, month, week, year\n  * @return {*}\n  */\n\tonSelectType = (type, expressType) => {\n\t\tlet expressionTypeState = this.state.expressType\n\t\texpressionTypeState[expressType] = type\n\n\t\tthis.setState({ expressType: expressionTypeState }, () => {\n\t\t\t// 特殊逻辑判断，获取最新表达式\n\t\t\tthis.judgeSpecialCRON(type, expressType)\n\t\t})\n\t}\n\n\t/**\n  * @name: 获取每个cron阈的表达式字符串\n  * @param {*} type\n  * @param {*} expressType\n  * @return {*}\n  */\n\tgetExpressStr = (type, expressType) => {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'everyTime': return '*'\n\t\t\t\tcase 'none': return '?'\n\t\t\t\tcase 'lastDay': return 'L'\n\t\t\t\tcase 'period': return this.expressGenerator(type, this.state.periodTime[expressType])\n\t\t\t\tcase 'loop': return this.expressGenerator(type, this.state.loopTime[expressType])\n\t\t\t\tcase 'enum': return this.expressGenerator(type, this.state.enumTime[expressType])\n\t\t\t\tcase 'mostRecentWorkDay': return this.state.mostRecentWorkDay + 'W'\n\t\t\t\tcase 'lastWeekDay': return this.state.lastWeekDay + 'L'\n\t\t\t\tcase 'weekday': return this.expressGenerator(type, this.state.weekday)\n\t\t\t\tcase 'optional': return ''\n\t\t\t\tdefault: return\n\t\t\t}\n\t}\n\n\t/**\n  * @name: 获取cron表达式\n  * @param {type}\n  * @return {type}\n  */\n\texpressGenerator = (type, value) => {\n\t\tfunction getEnumString (values) {\n\t\t\tif (values.length > 0) {\n\t\t\t\tlet str = ''\n\t\t\t\tvalues.map(item => {\n\t\t\t\t\tstr = str + ',' + item\n\t\t\t\t})\n\t\t\t\tstr = str.substring(1, str.length)\n\t\t\t\treturn str\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn '*'\n\t\t}\n\t\tswitch (type) {\n\t\t\tcase 'everyTime': return '*'\n\t\t\tcase 'period': return value ? value.min + '-' + value.max : ''\n\t\t\tcase 'loop': return value ? value.startTime + '/' + value.period : ''\n\t\t\tcase 'enum': return getEnumString(value)\n\t\t\tcase 'weekday': return value ? value.weekNum + '#' + value.weekDayNum : ''\n\t\t\tdefault: return '*'\n\t\t}\n\t}\n\n\t/**\n  * @name: 表达式校验并对表达式进行赋值\n  * @param {*} type 当前选中阈值的表达式类型，例如：everyTime\n  * @param {*} expressType 当前选中的阈值的类型，例如：date、minute\n  * @return {*}\n  */\n\tjudgeSpecialCRON = (type, expressType) => {\n\t\tlet expressState = JSON.parse(JSON.stringify(this.state.express))\n\n\t\tif (type === this.state.expressType[expressType]) {\n\t\t\texpressState[expressType] = this.getExpressStr(type, expressType)\n\t\t}\n\n\t\t// 特殊赋值逻辑\n\t\tswitch (expressType) {\n\t\t\tcase 'date': {\n\t\t\t\t// 日期和星期不可同时为？（不指定）\n\t\t\t\tif (expressState.date === '?' && expressState.week === '?') {\n\t\t\t\t\tMessage.warning('日期和星期不可同时均不指定任何值')\n\t\t\t\t\texpressState.week = '*'\n\t\t\t\t}\n\t\t\t\t// 日期和星期不可同时指定内容（非？）\n\t\t\t\tif (expressState.date !== '?' && expressState.week !== '?') {\n\t\t\t\t\tMessage.warning('日期和星期不可同时指定任何值')\n\t\t\t\t\texpressState.week = '?'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'month': {\n\t\t\t\t// 当月份选择为*（任意）时，星期设定为？（不指定）\n\t\t\t\tMessage.warning('当月份选择为任意值时，星期设定为不指定模式（?）')\n\t\t\t\tif (expressState.month === '*') {\n\t\t\t\t\texpressState.week = '?'\n\t\t\t\t\tif (expressState.date === '?') {\n\t\t\t\t\t\texpressState.date = '*'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'week': {\n\t\t\t\t// 日期和星期不可同时为？（不指定）\n\t\t\t\tif (expressState.week === '?' && expressState.date === '?') {\n\t\t\t\t\texpressState.date = '*'\n\t\t\t\t\tMessage.warning('日期和星期不可同时均不指定任何值')\n\t\t\t\t}\n\t\t\t\t// 日期和星期不可同时指定内容（非？）\n\t\t\t\tif (expressState.week !== '?' && expressState.date !== '?') {\n\t\t\t\t\texpressState.date = '?'\n\t\t\t\t\tMessage.warning('日期和星期不可同时指定任何值')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault: break\n\t\t}\n\n\t\tthis.setState({ express: expressState })\n\t}\n\n /**\n  * @name: 选择 最小时间-最大时间\n  * @param {*} num\n  * @param {*} type\n  * @param {*} numType\n  * @return {*}\n  */\n\tonSelectPeriod = (num, expressType, numType) => {\n\t\tlet period = JSON.parse(JSON.stringify(this.state.periodTime))\n\t\tif (numType === 'max') {\n\t\t\tperiod[expressType].max = num\n\t\t}\n\t\telse {\n\t\t\tperiod[expressType].min = num\n\t\t}\n\t\tthis.setState({ periodTime: period }, () => {\n\t\t\tthis.judgeSpecialCRON('period', expressType)\n\t\t})\n\t}\n\n /**\n  * @name: 选择 开始时间/间隔周期\n  * @param {*} num\n  * @param {*} type\n  * @param {*} numType\n  * @return {*}\n  */\n\tonSelectLoop = (num, expressType, numType) => {\n\t\tlet loop = JSON.parse(JSON.stringify(this.state.loopTime))\n\t\tif (numType === 'startTime') {\n\t\t\tloop[expressType].startTime = num\n\t\t}\n\t\telse {\n\t\t\tloop[expressType].period = num\n\t\t}\n\t\tthis.setState({ loopTime: loop }, () => {\n\t\t\tthis.judgeSpecialCRON('loop', expressType)\n\t\t})\n\t}\n\n\t/**\n  * @name: 选择枚举值\n  * @param {*} values\n  * @param {*} type\n  * @return {*}\n  */\n\tonSelectEnum = (values, expressType) => {\n\t\tlet enumObj = JSON.parse(JSON.stringify(this.state.enumTime))\n\t\tenumObj[expressType] = values\n\n\t\tthis.setState({ enumTime: enumObj }, () => {\n\t\t\tthis.judgeSpecialCRON('enum', expressType)\n\t\t})\n\t}\n\n\t/**\n  * @name: 选择星期执行循环\n  * @param {*} value\n  * @param {*} type\n  * @return {*}\n  */\n\tonSelectWeekDay = (value, type) => {\n\t\tlet weekday = JSON.parse(JSON.stringify(this.state.weekday))\n\t\tif (type === 'weekNum') {\n\t\t\tweekday.weekNum = value\n\t\t}\n\t\telse {\n\t\t\tweekday.weekDayNum = value\n\t\t}\n\t\tthis.setState({ weekday: weekday }, () => {\n\t\t\tthis.judgeSpecialCRON('weekday', 'week')\n\t\t})\n\t}\n\n\t// 确认提交\n\tonConfirm = () => {\n\t\tlet expressStr =\n\t\t\tthis.state.express.second + ' ' +\n\t\t\tthis.state.express.minute + ' ' +\n\t\t\tthis.state.express.hour + ' ' +\n\t\t\tthis.state.express.date + ' ' +\n\t\t\tthis.state.express.month + ' ' +\n\t\t\tthis.state.express.week + ' ' +\n\t\t\tthis.state.express.year\n\n\t\tthis.props.onConfirm(expressStr)\n\t\tthis.props.onClose()\n\t}\n\n\trender () {\n\t\tconst { dialogVisible, onClose, isPreview } = this.props\n\t\tconst {\n\t\t\tperiodTime,\n\t\t\tloopTime,\n\t\t\tenumTime,\n\t\t\tmostRecentWorkDay,\n\t\t\tlastWeekDay,\n\t\t\tweekday,\n\n\t\t\texpress,\n\t\t\texpressType,\n\t\t} = this.state\n\n\t\t/**\n   * @name:  增加空格\n   * @param {NUMBER} num：需要多少个空格\n   * @return {String} 空格字符\n   */\n\t\tconst spaceDOM = (num) => {\n\t\t\tlet space = ''\n\t\t\tfor (let i = 0; i < num; i++) {\n\t\t\t\tspace += '\\xa0'\n\t\t\t}\n\t\t\treturn space\n\t\t}\n\n\t\t/**\n   * @name: 多选框生成器\n   * @param {Number} num\n   * @param {Number} colNum\n   * @param {String} type 表示CRON类型，可输入second, minute, hour, date, month, week\n   * @return {*}\n   */\n\t\tconst checkboxGroup = (num, colNum, type) => {\n\t\t\tlet checkboxArray = []\n\n\t\t\tlet rowNum = num % colNum === 0 ? parseInt(num / colNum) : parseInt(num / colNum) + 1\n\n\t\t\tfor (let row = 0; row < rowNum; row++) {\n\t\t\t\tlet startNum = row * colNum\n\t\t\t\tlet endNum = (row + 1) * colNum\n\n\t\t\t\tif (row === rowNum - 1 && num % colNum > 0) {\n\t\t\t\t\tendNum = num\n\t\t\t\t}\n\t\t\t\tcheckboxArray.push(\n\t\t\t\t\tgenerateRow(startNum, endNum, type)\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tfunction generateRow (startNum, endNum, type) {\n\t\t\t\tlet colArr = []\n\t\t\t\tfor (let i = startNum; i < endNum; i++) {\n\t\t\t\t\tlet label = i\n\t\t\t\t\tlet value = i\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'second': label = i; break\n\t\t\t\t\t\tcase 'minute': label = i; break\n\t\t\t\t\t\tcase 'hour': label = i; break\n\t\t\t\t\t\tcase 'date': label = i + 1; value = i + 1; break\n\t\t\t\t\t\tcase 'month': label = i + 1; value = i + 1; break\n\t\t\t\t\t\tcase 'week': label = i + 1; value = i + 1; break\n\t\t\t\t\t\tdefault: break\n\t\t\t\t\t}\n\t\t\t\t\tcolArr.push({ value: value, label: label })\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<Row justify=\"start\" style={{ marginTop: 10 }} key={startNum}>\n\t\t\t\t\t\t{colArr.map((item, index) => (\n\t\t\t\t\t\t\t<Col key={index}>\n\t\t\t\t\t\t\t\t<Checkbox value={item.value} label={item.label}/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Row>\n\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treturn checkboxArray\n\t\t}\n\n\t\treturn (\n\t\t\t<Dialog\n\t\t\t\ttitle=\"CRON生成器\"\n\t\t\t\tvisible={dialogVisible}\n\t\t\t\tonClose={onClose}\n\t\t\t\tonCancel={onClose}\n\t\t\t\tonOk={this.onConfirm}\n\t\t\t\tfooter={!isPreview}\n\t\t\t>\n\t\t\t\t<Tab shape=\"pure\" className=\"cron_generator_container\">\n\t\t\t\t\t<Tab.Item title=\"秒\" key={1}>\n\t\t\t\t\t\t<Radio.Group value={expressType.second} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'second')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每秒</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={58} value={periodTime.second.min} onChange={(num) => this.onSelectPeriod(num, 'second', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={59} value={periodTime.second.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'second', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}秒\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"loop\">\n\t\t\t\t\t\t\t\t从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={0} max={59} value={loopTime.second.startTime} defaultValue={1} onChange={(num) => this.onSelectLoop(num, 'second', 'startTime')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}秒开始，每{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={59} value={loopTime.second.period} defaultValue={2} onChange={(num) => this.onSelectLoop(num, 'second', 'period')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}秒执行一次\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'second')} value={enumTime.second}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(60, 10, 'second')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"分钟\" key={2}>\n\t\t\t\t\t\t<Radio.Group value={expressType.minute} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'minute')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每秒</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={58} value={periodTime.minute.min} onChange={(num) => this.onSelectPeriod(num, 'minute', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={59} value={periodTime.minute.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'minute', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}分钟\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"loop\">\n\t\t\t\t\t\t\t\t从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={0} max={59} value={loopTime.minute.startTime} defaultValue={1} onChange={(num) => this.onSelectLoop(num, 'minute', 'startTime')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}分钟开始，每{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={59} value={loopTime.minute.period} defaultValue={2} onChange={(num) => this.onSelectLoop(num, 'minute', 'period')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}分钟执行一次\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'minute')} value={enumTime.minute}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(60, 10, 'minute')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"小时\" key={3}>\n\t\t\t\t\t<Radio.Group value={expressType.hour} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'hour')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每小时</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={58} value={periodTime.hour.min} onChange={(num) => this.onSelectPeriod(num, 'hour', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={59} value={periodTime.hour.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'hour', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}小时\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"loop\">\n\t\t\t\t\t\t\t\t从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={0} max={59} value={loopTime.hour.startTime} defaultValue={1} onChange={(num) => this.onSelectLoop(num, 'hour', 'startTime')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}分钟开始，每{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={59} value={loopTime.hour.period} defaultValue={2} onChange={(num) => this.onSelectLoop(num, 'hour', 'period')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}小时执行一次\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'hour')} value={enumTime.hour}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(24, 12, 'hour')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"日\" key={4}>\n\t\t\t\t\t\t<Radio.Group value={expressType.date} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'date')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每日</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"none\">不指定</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={30} value={periodTime.date.min} onChange={(num) => this.onSelectPeriod(num, 'date', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={31} value={periodTime.date.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'date', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}天\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"loop\">\n\t\t\t\t\t\t\t\t从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={0} max={31} value={loopTime.date.startTime} defaultValue={1} onChange={(num) => this.onSelectLoop(num, 'date', 'startTime')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}天开始，每{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={31} value={loopTime.date.period} defaultValue={2} onChange={(num) => this.onSelectLoop(num, 'date', 'period')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}天执行一次\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"mostRecentWorkDay\">\n\t\t\t\t\t\t\t\t每月{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={31} value={mostRecentWorkDay} onChange={(num) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ mostRecentWorkDay: num }, () => {\n\t\t\t\t\t\t\t\t\t\t\tthis.judgeSpecialCRON('mostRecentWorkDay', 'date')\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}号最接近的那个工作日\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"lastDay\">本月最后一天</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'date')} value={enumTime.date}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(31, 10, 'date')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"月\" key={5}>\n\t\t\t\t\t\t<Radio.Group value={expressType.month} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'month')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每月</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={30} value={periodTime.month.min} onChange={(num) => this.onSelectPeriod(num, 'month', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={31} value={periodTime.month.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'month', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}月\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"loop\">\n\t\t\t\t\t\t\t\t从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={0} max={31} value={loopTime.month.startTime} defaultValue={1} onChange={(num) => this.onSelectLoop(num, 'month', 'startTime')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}月开始，每{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={31} value={loopTime.month.period} defaultValue={2} onChange={(num) => this.onSelectLoop(num, 'month', 'period')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}月执行一次\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'month')} value={enumTime.month}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(31, 10, 'month')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"周\" key={6}>\n\t\t\t\t\t\t<Radio.Group value={expressType.week} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'week')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每日</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"none\">不指定</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从星期{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={30} value={periodTime.week.min} onChange={(num) => this.onSelectPeriod(num, 'week', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}到星期{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={2} max={31} value={periodTime.week.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'week', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"weekday\">\n\t\t\t\t\t\t\t\t第{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={4} value={weekday.weekNum} defaultValue={1} onChange={(num) => this.onSelectWeekDay(num, 'weekNum')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}周的星期{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={7} value={weekday.weekDayNum} defaultValue={1} onChange={(num) => this.onSelectWeekDay(num, 'weekDayNum')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"lastWeekDay\">\n\t\t\t\t\t\t\t\t本月最后一个星期{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1} max={7} value={lastWeekDay}\n\t\t\t\t\t\t\t\t\tonChange={(num) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ lastWeekDay: num }, () => {\n\t\t\t\t\t\t\t\t\t\t\tthis.judgeSpecialCRON('lastWeekDay', 'week')\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"enum\">\n\t\t\t\t\t\t\t\t指定： <br />\n\t\t\t\t\t\t\t\t<Checkbox.Group onChange={(values) => this.onSelectEnum(values, 'week')} value={enumTime.week}>\n\t\t\t\t\t\t\t\t\t{checkboxGroup(7, 7, 'week')}\n\t\t\t\t\t\t\t\t</Checkbox.Group>\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\n\t\t\t\t\t<Tab.Item title=\"年\" key={7}>\n\t\t\t\t\t\t<Radio.Group value={expressType.year} itemDirection=\"ver\" className=\"cron_info\" onChange={(type) => this.onSelectType(type, 'year')}>\n\t\t\t\t\t\t\t<Radio value=\"everyTime\">每年</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"optional\">不指定</Radio>\n\n\t\t\t\t\t\t\t<Radio value=\"period\">\n\t\t\t\t\t\t\t\t周期从{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1970} max={2099} value={periodTime.year.min} onChange={(num) => this.onSelectPeriod(num, 'year', 'min')}/>\n\t\t\t\t\t\t\t\t{spaceDOM(2)}年到{spaceDOM(2)}\n\t\t\t\t\t\t\t\t<NumberPicker min={1970} max={2099} value={periodTime.year.max} defaultValue={2} onChange={(num) => this.onSelectPeriod(num, 'year', 'max')} />\n\t\t\t\t\t\t\t\t{spaceDOM(2)}年\n\t\t\t\t\t\t\t</Radio>\n\n\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t</Tab.Item>\n\t\t\t\t</Tab>\n\t\t\t\t<div className=\"expression_box\">\n\t\t\t\t\t<span>CRON 表达式：</span>\n\t\t\t\t\t<Table dataSource={[express]}>\n\t\t\t\t\t\t<Table.Column dataIndex='second' title=\"秒\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='minute' title=\"分钟\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='hour' title=\"小时\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='date' title=\"日\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='month' title=\"月\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='week' title=\"周\" align=\"center\" width={100}/>\n\t\t\t\t\t\t<Table.Column dataIndex='year' title=\"年\" align=\"center\" width={100}/>\n\t\t\t\t\t</Table>\n\t\t\t\t\t<span style={{ color: 'red' }}>{this.state.alertMsg}</span>\n\t\t\t\t</div>\n\t\t\t</Dialog>\n\t\t)\n\t}\n}\n","/Users/shenling/Documents/frontEnd_practice/react_cron_generator/src/App.js",[],{"ruleId":"18","severity":1,"message":"19","line":9,"column":30,"nodeType":"20","messageId":"21","endLine":9,"endColumn":35},{"ruleId":"18","severity":1,"message":"22","line":9,"column":37,"nodeType":"20","messageId":"21","endLine":9,"endColumn":43},{"ruleId":"23","severity":1,"message":"24","line":244,"column":21,"nodeType":"25","messageId":"26","endLine":244,"endColumn":23},"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]